// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_connection.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserConnection = `-- name: CreateUserConnection :one
INSERT INTO user_connection (
  username,
  last_connection_date_time,
  last_action_date_time,
  logged_on_date_time,
  expired_date_time,
  session_key,
  client_device,
  created_datetime,
  updated_datetime
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, username, last_connection_date_time, last_action_date_time, logged_on_date_time, expired_date_time, session_key, client_device, created_datetime, updated_datetime
`

type CreateUserConnectionParams struct {
	Username               string      `json:"username"`
	LastConnectionDateTime pgtype.Date `json:"last_connection_date_time"`
	LastActionDateTime     pgtype.Date `json:"last_action_date_time"`
	LoggedOnDateTime       pgtype.Date `json:"logged_on_date_time"`
	ExpiredDateTime        pgtype.Date `json:"expired_date_time"`
	SessionKey             string      `json:"session_key"`
	ClientDevice           string      `json:"client_device"`
	CreatedDatetime        pgtype.Date `json:"created_datetime"`
	UpdatedDatetime        pgtype.Date `json:"updated_datetime"`
}

func (q *Queries) CreateUserConnection(ctx context.Context, arg CreateUserConnectionParams) (UserConnection, error) {
	row := q.db.QueryRow(ctx, createUserConnection,
		arg.Username,
		arg.LastConnectionDateTime,
		arg.LastActionDateTime,
		arg.LoggedOnDateTime,
		arg.ExpiredDateTime,
		arg.SessionKey,
		arg.ClientDevice,
		arg.CreatedDatetime,
		arg.UpdatedDatetime,
	)
	var i UserConnection
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.LastConnectionDateTime,
		&i.LastActionDateTime,
		&i.LoggedOnDateTime,
		&i.ExpiredDateTime,
		&i.SessionKey,
		&i.ClientDevice,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}

const getUserConnection = `-- name: GetUserConnection :one
SELECT id, username, last_connection_date_time, last_action_date_time, logged_on_date_time, expired_date_time, session_key, client_device, created_datetime, updated_datetime FROM user_connection
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserConnection(ctx context.Context, username string) (UserConnection, error) {
	row := q.db.QueryRow(ctx, getUserConnection, username)
	var i UserConnection
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.LastConnectionDateTime,
		&i.LastActionDateTime,
		&i.LoggedOnDateTime,
		&i.ExpiredDateTime,
		&i.SessionKey,
		&i.ClientDevice,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}
