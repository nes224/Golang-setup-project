// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"time"

)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  username,
  email,
  fullname,
  password,
  role,
  enable,
  created_datetime,
  updated_datetime
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING username, email, fullname, password, role, enable, created_datetime, updated_datetime
`

type CreateUserParams struct {
	Username        string             `json:"username"`
	Email           string             `json:"email"`
	Fullname        string             `json:"fullname"`
	Password        string             `json:"password"`
	Role            string             `json:"role"`
	Enable          int32              `json:"enable"`
	CreatedDatetime time.Time `json:"created_datetime"`
	UpdatedDatetime time.Time        `json:"updated_datetime"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Fullname,
		arg.Password,
		arg.Role,
		arg.Enable,
		arg.CreatedDatetime,
		arg.UpdatedDatetime,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Enable,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, email, fullname, password, role, enable, created_datetime, updated_datetime FROM "user"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Enable,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
	)
	return i, err
}
